version: 2.1

commands:
  # Exercise - Rollback 
  destroy_environment: 
    steps:
      - run: 
          name: Destroy environment 
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail 
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  # create_infrastructure:
    
  #   docker:
  #     - image: amazon/aws-cli
   
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Create Cloudformation Stack"
  #         command: | 
  #           aws cloudformation deploy \
  #               --template-file template.yml \
  #               --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #               --region us-east-1

  # create_infrastructure:
  #   docker:
  #     - image: amazon/aws-cli 
  #   steps: 
  #     - checkout 
  #     - run:
  #         name: Create Cloudformation Stack 
  #         command: |
  #           aws cloudformation deploy \
  #            --template-file template.yml \
  #            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
  #            --region us-east-1  
  #     - run: return 1
  #     - destroy_environment 
           

  # smoke_test: 
  #   docker: 
  #     - image: alpine:latest 
  #   steps: 
  #     - run: 
  #         name: Test job 
  #         # Fail the job intentionally to simulate an error.
  #         command: return 1 
  #     - destroy_environment                   

  configure_infrastructure:
    docker: 
      - image: python:3.7-alpine3.16
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["20:69:b6:ca:0c:c1:64:94:f6:5b:a6:0e:81:8b:f7:d1"] 
      - run: 
          name: Run Playbook and Configure server 
          command: | 
            # Install Ansible 
            apk add --update ansible
      - run: 
          name: Run Playbook and Configure server 
          command: |
            ansible-playbook -i inventory main-remote.yml

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli 
    steps: 
      - checkout 
      - run: 
          name: Execute bucket.yml - Create Cloudformation Stack 
          command: |   
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
    docker: 
      - image: amazon/aws-cli
    steps: 
      - checkout 
      - run:   
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: | 
            aws cloudformation \
          list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
          --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
        root: ~/
        paths: 
          - textfile.txt

  promote_to_production:    
    docker:
      - image: amazon/aws-cli
    steps: 
      - checkout 
      - run: 
          name: Execute cloudfront.yml 
          command: | 
              aws cloudformation deploy \
                --template-file cloudfront.yml \
                --stack-name production-distro \
                --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"  

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps: 
      - checkout 
      - run: yum install -y tar gzip 
      - attach_workspace: 
          at: `/  
      - run: 
          name: Destroy the previous s3 bucket and CloudFormation stack.
          command: | 
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive    

workflows:
  my_workflow:
    jobs:
      # - configure_infrastructure
      # - smoke_test
      - create_and_deploy_front_end 
      - promote_to_production:
          requires:
            - create_and_deploy_front_end 
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id 
            - promote_to_production      
